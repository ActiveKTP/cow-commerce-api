# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Farm {
  id: ID!
  name: String
  Address: String
  MobileNo: String
  cow(
    where: CowWhereInput! = {}
    orderBy: [CowOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cow!]
  cowCount(where: CowWhereInput! = {}): Int
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input FarmWhereUniqueInput {
  id: ID
}

input FarmWhereInput {
  AND: [FarmWhereInput!]
  OR: [FarmWhereInput!]
  NOT: [FarmWhereInput!]
  id: IDFilter
  name: StringFilter
  Address: StringFilter
  MobileNo: StringFilter
  cow: CowManyRelationFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input CowManyRelationFilter {
  every: CowWhereInput
  some: CowWhereInput
  none: CowWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FarmOrderByInput {
  id: OrderDirection
  name: OrderDirection
  Address: OrderDirection
  MobileNo: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input FarmUpdateInput {
  name: String
  Address: String
  MobileNo: String
  cow: CowRelateToManyForUpdateInput
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input CowRelateToManyForUpdateInput {
  disconnect: [CowWhereUniqueInput!]
  set: [CowWhereUniqueInput!]
  create: [CowCreateInput!]
  connect: [CowWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input FarmUpdateArgs {
  where: FarmWhereUniqueInput!
  data: FarmUpdateInput!
}

input FarmCreateInput {
  name: String
  Address: String
  MobileNo: String
  cow: CowRelateToManyForCreateInput
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

input CowRelateToManyForCreateInput {
  create: [CowCreateInput!]
  connect: [CowWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Cow {
  id: ID!
  Farm: Farm
  cowId: String
  name: String
  cSex: String
  cBirthDate: DateTime
  cStatus: String
  cProductionStatus: String
  cLactation: Int
  cNumOfService: Int
  frontimage: ImageFieldOutput
  sideimage: ImageFieldOutput
  backimage: ImageFieldOutput
  cFirstBreed: Boolean
  cSireId: Cow
  cDamId: Cow
  cowBreed(
    where: CowBreedWhereInput! = {}
    orderBy: [CowBreedOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CowBreed!]
  cowBreedCount(where: CowBreedWhereInput! = {}): Int
  cDateJoininHerd: DateTime
  cSource: String
  cowPrice(
    where: CowPriceWhereInput! = {}
    orderBy: [CowPriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CowPrice!]
  cowPriceCount(where: CowPriceWhereInput! = {}): Int
  isActive: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input CowWhereUniqueInput {
  id: ID
}

input CowWhereInput {
  AND: [CowWhereInput!]
  OR: [CowWhereInput!]
  NOT: [CowWhereInput!]
  id: IDFilter
  Farm: FarmWhereInput
  cowId: StringFilter
  name: StringFilter
  cSex: StringNullableFilter
  cBirthDate: DateTimeNullableFilter
  cStatus: StringNullableFilter
  cProductionStatus: StringNullableFilter
  cLactation: IntNullableFilter
  cNumOfService: IntNullableFilter
  cFirstBreed: BooleanFilter
  cSireId: CowWhereInput
  cDamId: CowWhereInput
  cowBreed: CowBreedManyRelationFilter
  cDateJoininHerd: DateTimeNullableFilter
  cSource: StringNullableFilter
  cowPrice: CowPriceManyRelationFilter
  isActive: BooleanFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CowBreedManyRelationFilter {
  every: CowBreedWhereInput
  some: CowBreedWhereInput
  none: CowBreedWhereInput
}

input CowPriceManyRelationFilter {
  every: CowPriceWhereInput
  some: CowPriceWhereInput
  none: CowPriceWhereInput
}

input CowOrderByInput {
  id: OrderDirection
  cowId: OrderDirection
  name: OrderDirection
  cSex: OrderDirection
  cBirthDate: OrderDirection
  cStatus: OrderDirection
  cProductionStatus: OrderDirection
  cLactation: OrderDirection
  cNumOfService: OrderDirection
  cFirstBreed: OrderDirection
  cDateJoininHerd: OrderDirection
  cSource: OrderDirection
  isActive: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input CowUpdateInput {
  Farm: FarmRelateToOneForUpdateInput
  cowId: String
  name: String
  cSex: String
  cBirthDate: DateTime
  cStatus: String
  cProductionStatus: String
  cLactation: Int
  cNumOfService: Int
  frontimage: ImageFieldInput
  sideimage: ImageFieldInput
  backimage: ImageFieldInput
  cFirstBreed: Boolean
  cSireId: CowRelateToOneForUpdateInput
  cDamId: CowRelateToOneForUpdateInput
  cowBreed: CowBreedRelateToManyForUpdateInput
  cDateJoininHerd: DateTime
  cSource: String
  cowPrice: CowPriceRelateToManyForUpdateInput
  isActive: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input FarmRelateToOneForUpdateInput {
  create: FarmCreateInput
  connect: FarmWhereUniqueInput
  disconnect: Boolean
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input CowRelateToOneForUpdateInput {
  create: CowCreateInput
  connect: CowWhereUniqueInput
  disconnect: Boolean
}

input CowBreedRelateToManyForUpdateInput {
  disconnect: [CowBreedWhereUniqueInput!]
  set: [CowBreedWhereUniqueInput!]
  create: [CowBreedCreateInput!]
  connect: [CowBreedWhereUniqueInput!]
}

input CowPriceRelateToManyForUpdateInput {
  disconnect: [CowPriceWhereUniqueInput!]
  set: [CowPriceWhereUniqueInput!]
  create: [CowPriceCreateInput!]
  connect: [CowPriceWhereUniqueInput!]
}

input CowUpdateArgs {
  where: CowWhereUniqueInput!
  data: CowUpdateInput!
}

input CowCreateInput {
  Farm: FarmRelateToOneForCreateInput
  cowId: String
  name: String
  cSex: String
  cBirthDate: DateTime
  cStatus: String
  cProductionStatus: String
  cLactation: Int
  cNumOfService: Int
  frontimage: ImageFieldInput
  sideimage: ImageFieldInput
  backimage: ImageFieldInput
  cFirstBreed: Boolean
  cSireId: CowRelateToOneForCreateInput
  cDamId: CowRelateToOneForCreateInput
  cowBreed: CowBreedRelateToManyForCreateInput
  cDateJoininHerd: DateTime
  cSource: String
  cowPrice: CowPriceRelateToManyForCreateInput
  isActive: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

input FarmRelateToOneForCreateInput {
  create: FarmCreateInput
  connect: FarmWhereUniqueInput
}

input CowRelateToOneForCreateInput {
  create: CowCreateInput
  connect: CowWhereUniqueInput
}

input CowBreedRelateToManyForCreateInput {
  create: [CowBreedCreateInput!]
  connect: [CowBreedWhereUniqueInput!]
}

input CowPriceRelateToManyForCreateInput {
  create: [CowPriceCreateInput!]
  connect: [CowPriceWhereUniqueInput!]
}

type Breed {
  id: ID!
  name: String
  breed: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

input BreedWhereUniqueInput {
  id: ID
}

input BreedWhereInput {
  AND: [BreedWhereInput!]
  OR: [BreedWhereInput!]
  NOT: [BreedWhereInput!]
  id: IDFilter
  name: StringFilter
  breed: StringFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input BreedOrderByInput {
  id: OrderDirection
  name: OrderDirection
  breed: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input BreedUpdateInput {
  name: String
  breed: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input BreedUpdateArgs {
  where: BreedWhereUniqueInput!
  data: BreedUpdateInput!
}

input BreedCreateInput {
  name: String
  breed: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

type CowBreed {
  id: ID!
  cow: Cow
  breedType: Breed
  breedPercent: Float
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

input CowBreedWhereUniqueInput {
  id: ID
}

input CowBreedWhereInput {
  AND: [CowBreedWhereInput!]
  OR: [CowBreedWhereInput!]
  NOT: [CowBreedWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  breedType: BreedWhereInput
  breedPercent: FloatNullableFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input CowBreedOrderByInput {
  id: OrderDirection
  breedPercent: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input CowBreedUpdateInput {
  cow: CowRelateToOneForUpdateInput
  breedType: BreedRelateToOneForUpdateInput
  breedPercent: Float
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input BreedRelateToOneForUpdateInput {
  create: BreedCreateInput
  connect: BreedWhereUniqueInput
  disconnect: Boolean
}

input CowBreedUpdateArgs {
  where: CowBreedWhereUniqueInput!
  data: CowBreedUpdateInput!
}

input CowBreedCreateInput {
  cow: CowRelateToOneForCreateInput
  breedType: BreedRelateToOneForCreateInput
  breedPercent: Float
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

input BreedRelateToOneForCreateInput {
  create: BreedCreateInput
  connect: BreedWhereUniqueInput
}

type CowPrice {
  id: ID!
  cow: Cow
  maxPrice: Int
  minPrice: Int
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

input CowPriceWhereUniqueInput {
  id: ID
}

input CowPriceWhereInput {
  AND: [CowPriceWhereInput!]
  OR: [CowPriceWhereInput!]
  NOT: [CowPriceWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  maxPrice: IntNullableFilter
  minPrice: IntNullableFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input CowPriceOrderByInput {
  id: OrderDirection
  maxPrice: OrderDirection
  minPrice: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input CowPriceUpdateInput {
  cow: CowRelateToOneForUpdateInput
  maxPrice: Int
  minPrice: Int
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input CowPriceUpdateArgs {
  where: CowPriceWhereUniqueInput!
  data: CowPriceUpdateInput!
}

input CowPriceCreateInput {
  cow: CowRelateToOneForCreateInput
  maxPrice: Int
  minPrice: Int
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

type SemenBeef {
  id: ID!
  cow: Cow
  name: String
  recivedDate: DateTime
  expireDate: DateTime
  keepLocation: String
  sPrice: Int
  isActive: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

input SemenBeefWhereUniqueInput {
  id: ID
}

input SemenBeefWhereInput {
  AND: [SemenBeefWhereInput!]
  OR: [SemenBeefWhereInput!]
  NOT: [SemenBeefWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  name: StringFilter
  recivedDate: DateTimeFilter
  expireDate: DateTimeNullableFilter
  keepLocation: StringFilter
  sPrice: IntNullableFilter
  isActive: BooleanFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input SemenBeefOrderByInput {
  id: OrderDirection
  name: OrderDirection
  recivedDate: OrderDirection
  expireDate: OrderDirection
  keepLocation: OrderDirection
  sPrice: OrderDirection
  isActive: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input SemenBeefUpdateInput {
  cow: CowRelateToOneForUpdateInput
  name: String
  recivedDate: DateTime
  expireDate: DateTime
  keepLocation: String
  sPrice: Int
  isActive: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input SemenBeefUpdateArgs {
  where: SemenBeefWhereUniqueInput!
  data: SemenBeefUpdateInput!
}

input SemenBeefCreateInput {
  cow: CowRelateToOneForCreateInput
  name: String
  recivedDate: DateTime
  expireDate: DateTime
  keepLocation: String
  sPrice: Int
  isActive: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

type Mating {
  id: ID!
  cow: Cow
  maLactation: Int
  maNumberOfService: Int
  maMatingMethod: String
  maDate: DateTime
  maSemenId: SemenBeef
  maResult: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
  pregnancy(
    where: PregnancyCheckWhereInput! = {}
    orderBy: [PregnancyCheckOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PregnancyCheck!]
  pregnancyCount(where: PregnancyCheckWhereInput! = {}): Int
  Farm: Farm
}

input MatingWhereUniqueInput {
  id: ID
}

input MatingWhereInput {
  AND: [MatingWhereInput!]
  OR: [MatingWhereInput!]
  NOT: [MatingWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  maLactation: IntNullableFilter
  maNumberOfService: IntNullableFilter
  maMatingMethod: StringNullableFilter
  maDate: DateTimeFilter
  maSemenId: SemenBeefWhereInput
  maResult: StringNullableFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
  pregnancy: PregnancyCheckManyRelationFilter
  Farm: FarmWhereInput
}

input PregnancyCheckManyRelationFilter {
  every: PregnancyCheckWhereInput
  some: PregnancyCheckWhereInput
  none: PregnancyCheckWhereInput
}

input MatingOrderByInput {
  id: OrderDirection
  maLactation: OrderDirection
  maNumberOfService: OrderDirection
  maMatingMethod: OrderDirection
  maDate: OrderDirection
  maResult: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input MatingUpdateInput {
  cow: CowRelateToOneForUpdateInput
  maLactation: Int
  maNumberOfService: Int
  maMatingMethod: String
  maDate: DateTime
  maSemenId: SemenBeefRelateToOneForUpdateInput
  maResult: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
  pregnancy: PregnancyCheckRelateToManyForUpdateInput
  Farm: FarmRelateToOneForUpdateInput
}

input SemenBeefRelateToOneForUpdateInput {
  create: SemenBeefCreateInput
  connect: SemenBeefWhereUniqueInput
  disconnect: Boolean
}

input PregnancyCheckRelateToManyForUpdateInput {
  disconnect: [PregnancyCheckWhereUniqueInput!]
  set: [PregnancyCheckWhereUniqueInput!]
  create: [PregnancyCheckCreateInput!]
  connect: [PregnancyCheckWhereUniqueInput!]
}

input MatingUpdateArgs {
  where: MatingWhereUniqueInput!
  data: MatingUpdateInput!
}

input MatingCreateInput {
  cow: CowRelateToOneForCreateInput
  maLactation: Int
  maNumberOfService: Int
  maMatingMethod: String
  maDate: DateTime
  maSemenId: SemenBeefRelateToOneForCreateInput
  maResult: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
  pregnancy: PregnancyCheckRelateToManyForCreateInput
  Farm: FarmRelateToOneForCreateInput
}

input SemenBeefRelateToOneForCreateInput {
  create: SemenBeefCreateInput
  connect: SemenBeefWhereUniqueInput
}

input PregnancyCheckRelateToManyForCreateInput {
  create: [PregnancyCheckCreateInput!]
  connect: [PregnancyCheckWhereUniqueInput!]
}

type PregnancyCheck {
  id: ID!
  cow: Cow
  mating: Mating
  pcCheckDate: DateTime
  pcCheckResult: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
  Farm: Farm
}

input PregnancyCheckWhereUniqueInput {
  id: ID
}

input PregnancyCheckWhereInput {
  AND: [PregnancyCheckWhereInput!]
  OR: [PregnancyCheckWhereInput!]
  NOT: [PregnancyCheckWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  mating: MatingWhereInput
  pcCheckDate: DateTimeFilter
  pcCheckResult: StringNullableFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
  Farm: FarmWhereInput
}

input PregnancyCheckOrderByInput {
  id: OrderDirection
  pcCheckDate: OrderDirection
  pcCheckResult: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input PregnancyCheckUpdateInput {
  cow: CowRelateToOneForUpdateInput
  mating: MatingRelateToOneForUpdateInput
  pcCheckDate: DateTime
  pcCheckResult: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
  Farm: FarmRelateToOneForUpdateInput
}

input MatingRelateToOneForUpdateInput {
  create: MatingCreateInput
  connect: MatingWhereUniqueInput
  disconnect: Boolean
}

input PregnancyCheckUpdateArgs {
  where: PregnancyCheckWhereUniqueInput!
  data: PregnancyCheckUpdateInput!
}

input PregnancyCheckCreateInput {
  cow: CowRelateToOneForCreateInput
  mating: MatingRelateToOneForCreateInput
  pcCheckDate: DateTime
  pcCheckResult: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
  Farm: FarmRelateToOneForCreateInput
}

input MatingRelateToOneForCreateInput {
  create: MatingCreateInput
  connect: MatingWhereUniqueInput
}

type Abortion {
  id: ID!
  cow: Cow
  mating: Mating
  abAbortionDate: DateTime
  setNewLac: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
  Farm: Farm
}

input AbortionWhereUniqueInput {
  id: ID
}

input AbortionWhereInput {
  AND: [AbortionWhereInput!]
  OR: [AbortionWhereInput!]
  NOT: [AbortionWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  mating: MatingWhereInput
  abAbortionDate: DateTimeFilter
  setNewLac: BooleanFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
  Farm: FarmWhereInput
}

input AbortionOrderByInput {
  id: OrderDirection
  abAbortionDate: OrderDirection
  setNewLac: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input AbortionUpdateInput {
  cow: CowRelateToOneForUpdateInput
  mating: MatingRelateToOneForUpdateInput
  abAbortionDate: DateTime
  setNewLac: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
  Farm: FarmRelateToOneForUpdateInput
}

input AbortionUpdateArgs {
  where: AbortionWhereUniqueInput!
  data: AbortionUpdateInput!
}

input AbortionCreateInput {
  cow: CowRelateToOneForCreateInput
  mating: MatingRelateToOneForCreateInput
  abAbortionDate: DateTime
  setNewLac: Boolean
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
  Farm: FarmRelateToOneForCreateInput
}

type Calving {
  id: ID!
  cow: Cow
  mating: Mating
  cvgDate: DateTime
  calve(
    where: CalveWhereInput! = {}
    orderBy: [CalveOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Calve!]
  calveCount(where: CalveWhereInput! = {}): Int
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
  Farm: Farm
}

input CalvingWhereUniqueInput {
  id: ID
}

input CalvingWhereInput {
  AND: [CalvingWhereInput!]
  OR: [CalvingWhereInput!]
  NOT: [CalvingWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  mating: MatingWhereInput
  cvgDate: DateTimeFilter
  calve: CalveManyRelationFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
  Farm: FarmWhereInput
}

input CalveManyRelationFilter {
  every: CalveWhereInput
  some: CalveWhereInput
  none: CalveWhereInput
}

input CalvingOrderByInput {
  id: OrderDirection
  cvgDate: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input CalvingUpdateInput {
  cow: CowRelateToOneForUpdateInput
  mating: MatingRelateToOneForUpdateInput
  cvgDate: DateTime
  calve: CalveRelateToManyForUpdateInput
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
  Farm: FarmRelateToOneForUpdateInput
}

input CalveRelateToManyForUpdateInput {
  disconnect: [CalveWhereUniqueInput!]
  set: [CalveWhereUniqueInput!]
  create: [CalveCreateInput!]
  connect: [CalveWhereUniqueInput!]
}

input CalvingUpdateArgs {
  where: CalvingWhereUniqueInput!
  data: CalvingUpdateInput!
}

input CalvingCreateInput {
  cow: CowRelateToOneForCreateInput
  mating: MatingRelateToOneForCreateInput
  cvgDate: DateTime
  calve: CalveRelateToManyForCreateInput
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
  Farm: FarmRelateToOneForCreateInput
}

input CalveRelateToManyForCreateInput {
  create: [CalveCreateInput!]
  connect: [CalveWhereUniqueInput!]
}

type Calve {
  id: ID!
  cow: Cow
  calving: Calving
  cvSex: String
  cvCalveNo: String
  cvCalveName: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

input CalveWhereUniqueInput {
  id: ID
}

input CalveWhereInput {
  AND: [CalveWhereInput!]
  OR: [CalveWhereInput!]
  NOT: [CalveWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  calving: CalvingWhereInput
  cvSex: StringFilter
  cvCalveNo: StringFilter
  cvCalveName: StringFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input CalveOrderByInput {
  id: OrderDirection
  cvSex: OrderDirection
  cvCalveNo: OrderDirection
  cvCalveName: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input CalveUpdateInput {
  cow: CowRelateToOneForUpdateInput
  calving: CalvingRelateToOneForUpdateInput
  cvSex: String
  cvCalveNo: String
  cvCalveName: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input CalvingRelateToOneForUpdateInput {
  create: CalvingCreateInput
  connect: CalvingWhereUniqueInput
  disconnect: Boolean
}

input CalveUpdateArgs {
  where: CalveWhereUniqueInput!
  data: CalveUpdateInput!
}

input CalveCreateInput {
  cow: CowRelateToOneForCreateInput
  calving: CalvingRelateToOneForCreateInput
  cvSex: String
  cvCalveNo: String
  cvCalveName: String
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

input CalvingRelateToOneForCreateInput {
  create: CalvingCreateInput
  connect: CalvingWhereUniqueInput
}

type Deworming {
  id: ID!
  cow: Cow
  deDate: DateTime
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: User
}

input DewormingWhereUniqueInput {
  id: ID
}

input DewormingWhereInput {
  AND: [DewormingWhereInput!]
  OR: [DewormingWhereInput!]
  NOT: [DewormingWhereInput!]
  id: IDFilter
  cow: CowWhereInput
  deDate: DateTimeFilter
  insertAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  userUpdate: UserWhereInput
}

input DewormingOrderByInput {
  id: OrderDirection
  deDate: OrderDirection
  insertAt: OrderDirection
  updatedAt: OrderDirection
}

input DewormingUpdateInput {
  cow: CowRelateToOneForUpdateInput
  deDate: DateTime
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForUpdateInput
}

input DewormingUpdateArgs {
  where: DewormingWhereUniqueInput!
  data: DewormingUpdateInput!
}

input DewormingCreateInput {
  cow: CowRelateToOneForCreateInput
  deDate: DateTime
  insertAt: DateTime
  updatedAt: DateTime
  userUpdate: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFarm(data: FarmCreateInput!): Farm
  createFarms(data: [FarmCreateInput!]!): [Farm]
  updateFarm(where: FarmWhereUniqueInput!, data: FarmUpdateInput!): Farm
  updateFarms(data: [FarmUpdateArgs!]!): [Farm]
  deleteFarm(where: FarmWhereUniqueInput!): Farm
  deleteFarms(where: [FarmWhereUniqueInput!]!): [Farm]
  createCow(data: CowCreateInput!): Cow
  createCows(data: [CowCreateInput!]!): [Cow]
  updateCow(where: CowWhereUniqueInput!, data: CowUpdateInput!): Cow
  updateCows(data: [CowUpdateArgs!]!): [Cow]
  deleteCow(where: CowWhereUniqueInput!): Cow
  deleteCows(where: [CowWhereUniqueInput!]!): [Cow]
  createBreed(data: BreedCreateInput!): Breed
  createBreeds(data: [BreedCreateInput!]!): [Breed]
  updateBreed(where: BreedWhereUniqueInput!, data: BreedUpdateInput!): Breed
  updateBreeds(data: [BreedUpdateArgs!]!): [Breed]
  deleteBreed(where: BreedWhereUniqueInput!): Breed
  deleteBreeds(where: [BreedWhereUniqueInput!]!): [Breed]
  createCowBreed(data: CowBreedCreateInput!): CowBreed
  createCowBreeds(data: [CowBreedCreateInput!]!): [CowBreed]
  updateCowBreed(
    where: CowBreedWhereUniqueInput!
    data: CowBreedUpdateInput!
  ): CowBreed
  updateCowBreeds(data: [CowBreedUpdateArgs!]!): [CowBreed]
  deleteCowBreed(where: CowBreedWhereUniqueInput!): CowBreed
  deleteCowBreeds(where: [CowBreedWhereUniqueInput!]!): [CowBreed]
  createCowPrice(data: CowPriceCreateInput!): CowPrice
  createCowPrices(data: [CowPriceCreateInput!]!): [CowPrice]
  updateCowPrice(
    where: CowPriceWhereUniqueInput!
    data: CowPriceUpdateInput!
  ): CowPrice
  updateCowPrices(data: [CowPriceUpdateArgs!]!): [CowPrice]
  deleteCowPrice(where: CowPriceWhereUniqueInput!): CowPrice
  deleteCowPrices(where: [CowPriceWhereUniqueInput!]!): [CowPrice]
  createSemenBeef(data: SemenBeefCreateInput!): SemenBeef
  createSemenBeefs(data: [SemenBeefCreateInput!]!): [SemenBeef]
  updateSemenBeef(
    where: SemenBeefWhereUniqueInput!
    data: SemenBeefUpdateInput!
  ): SemenBeef
  updateSemenBeefs(data: [SemenBeefUpdateArgs!]!): [SemenBeef]
  deleteSemenBeef(where: SemenBeefWhereUniqueInput!): SemenBeef
  deleteSemenBeefs(where: [SemenBeefWhereUniqueInput!]!): [SemenBeef]
  createMating(data: MatingCreateInput!): Mating
  createMatings(data: [MatingCreateInput!]!): [Mating]
  updateMating(where: MatingWhereUniqueInput!, data: MatingUpdateInput!): Mating
  updateMatings(data: [MatingUpdateArgs!]!): [Mating]
  deleteMating(where: MatingWhereUniqueInput!): Mating
  deleteMatings(where: [MatingWhereUniqueInput!]!): [Mating]
  createPregnancyCheck(data: PregnancyCheckCreateInput!): PregnancyCheck
  createPregnancyChecks(data: [PregnancyCheckCreateInput!]!): [PregnancyCheck]
  updatePregnancyCheck(
    where: PregnancyCheckWhereUniqueInput!
    data: PregnancyCheckUpdateInput!
  ): PregnancyCheck
  updatePregnancyChecks(data: [PregnancyCheckUpdateArgs!]!): [PregnancyCheck]
  deletePregnancyCheck(where: PregnancyCheckWhereUniqueInput!): PregnancyCheck
  deletePregnancyChecks(
    where: [PregnancyCheckWhereUniqueInput!]!
  ): [PregnancyCheck]
  createAbortion(data: AbortionCreateInput!): Abortion
  createAbortions(data: [AbortionCreateInput!]!): [Abortion]
  updateAbortion(
    where: AbortionWhereUniqueInput!
    data: AbortionUpdateInput!
  ): Abortion
  updateAbortions(data: [AbortionUpdateArgs!]!): [Abortion]
  deleteAbortion(where: AbortionWhereUniqueInput!): Abortion
  deleteAbortions(where: [AbortionWhereUniqueInput!]!): [Abortion]
  createCalving(data: CalvingCreateInput!): Calving
  createCalvings(data: [CalvingCreateInput!]!): [Calving]
  updateCalving(
    where: CalvingWhereUniqueInput!
    data: CalvingUpdateInput!
  ): Calving
  updateCalvings(data: [CalvingUpdateArgs!]!): [Calving]
  deleteCalving(where: CalvingWhereUniqueInput!): Calving
  deleteCalvings(where: [CalvingWhereUniqueInput!]!): [Calving]
  createCalve(data: CalveCreateInput!): Calve
  createCalves(data: [CalveCreateInput!]!): [Calve]
  updateCalve(where: CalveWhereUniqueInput!, data: CalveUpdateInput!): Calve
  updateCalves(data: [CalveUpdateArgs!]!): [Calve]
  deleteCalve(where: CalveWhereUniqueInput!): Calve
  deleteCalves(where: [CalveWhereUniqueInput!]!): [Calve]
  createDeworming(data: DewormingCreateInput!): Deworming
  createDewormings(data: [DewormingCreateInput!]!): [Deworming]
  updateDeworming(
    where: DewormingWhereUniqueInput!
    data: DewormingUpdateInput!
  ): Deworming
  updateDewormings(data: [DewormingUpdateArgs!]!): [Deworming]
  deleteDeworming(where: DewormingWhereUniqueInput!): Deworming
  deleteDewormings(where: [DewormingWhereUniqueInput!]!): [Deworming]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  farms(
    where: FarmWhereInput! = {}
    orderBy: [FarmOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Farm!]
  farm(where: FarmWhereUniqueInput!): Farm
  farmsCount(where: FarmWhereInput! = {}): Int
  cows(
    where: CowWhereInput! = {}
    orderBy: [CowOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Cow!]
  cow(where: CowWhereUniqueInput!): Cow
  cowsCount(where: CowWhereInput! = {}): Int
  breeds(
    where: BreedWhereInput! = {}
    orderBy: [BreedOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Breed!]
  breed(where: BreedWhereUniqueInput!): Breed
  breedsCount(where: BreedWhereInput! = {}): Int
  cowBreeds(
    where: CowBreedWhereInput! = {}
    orderBy: [CowBreedOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CowBreed!]
  cowBreed(where: CowBreedWhereUniqueInput!): CowBreed
  cowBreedsCount(where: CowBreedWhereInput! = {}): Int
  cowPrices(
    where: CowPriceWhereInput! = {}
    orderBy: [CowPriceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CowPrice!]
  cowPrice(where: CowPriceWhereUniqueInput!): CowPrice
  cowPricesCount(where: CowPriceWhereInput! = {}): Int
  semenBeefs(
    where: SemenBeefWhereInput! = {}
    orderBy: [SemenBeefOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SemenBeef!]
  semenBeef(where: SemenBeefWhereUniqueInput!): SemenBeef
  semenBeefsCount(where: SemenBeefWhereInput! = {}): Int
  matings(
    where: MatingWhereInput! = {}
    orderBy: [MatingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Mating!]
  mating(where: MatingWhereUniqueInput!): Mating
  matingsCount(where: MatingWhereInput! = {}): Int
  pregnancyChecks(
    where: PregnancyCheckWhereInput! = {}
    orderBy: [PregnancyCheckOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PregnancyCheck!]
  pregnancyCheck(where: PregnancyCheckWhereUniqueInput!): PregnancyCheck
  pregnancyChecksCount(where: PregnancyCheckWhereInput! = {}): Int
  abortions(
    where: AbortionWhereInput! = {}
    orderBy: [AbortionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Abortion!]
  abortion(where: AbortionWhereUniqueInput!): Abortion
  abortionsCount(where: AbortionWhereInput! = {}): Int
  calvings(
    where: CalvingWhereInput! = {}
    orderBy: [CalvingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Calving!]
  calving(where: CalvingWhereUniqueInput!): Calving
  calvingsCount(where: CalvingWhereInput! = {}): Int
  calves(
    where: CalveWhereInput! = {}
    orderBy: [CalveOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Calve!]
  calve(where: CalveWhereUniqueInput!): Calve
  calvesCount(where: CalveWhereInput! = {}): Int
  dewormings(
    where: DewormingWhereInput! = {}
    orderBy: [DewormingOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Deworming!]
  deworming(where: DewormingWhereUniqueInput!): Deworming
  dewormingsCount(where: DewormingWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
